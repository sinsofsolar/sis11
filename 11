def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var9 = func2(arg2, arg1)
    def func3(arg10, arg11):
        result = -1591785669 & (618 & ((-623 & (-255 + ((arg1 ^ arg11) ^ 1258184257) + -756 & 31)) + var9 - -130) + var9)
        return result
    var12 = func3(arg1, arg2)
    var16 = func4(arg2, var9)
    var20 = func6(var16, var12)
    var24 = func8(var16, arg1)
    var25 = var16 ^ (arg2 & (var9 - 1524191463))
    var26 = (var12 ^ var9 | var9) ^ var12
    var27 = var26 | var12 + var25
    var28 = (arg2 ^ var26 & var20) | var12
    if var12 < var9:
        var29 = -1951353995 ^ var20
    else:
        var29 = var26 & var9 - var25 + var12
    var30 = var27 ^ var24 | -1295717178 & var26
    var31 = -1817779311 + var9 + -277 - arg1
    var32 = 1704162622 ^ (var12 + var27) - arg1
    var33 = var32 ^ arg1
    var34 = var28 - 797349731 + (var30 - -471)
    result = var24 ^ ((1090051869 | (var26 - var28) | (var9 & var24)) & ((var24 ^ var27) + (var16 - var33 - var26))) + var9
    return result
def func2(arg3, arg4):
    var5 = arg3 | arg4 + 707
    var6 = 816 + -1881206278
    var7 = 330 & ((-461749306 + (arg4 | (-359 ^ -1301327096 + arg3))) | var6)
    var8 = (var7 ^ var5 | (arg4 | (var6 | var7 | (1171320890 & arg4)) | (var7 & arg4))) - var6
    result = ((-493 ^ var5) - var8) & (var5 | (var8 + (var8 - 93 + var6)) - 578567319 & var8 + arg3 - var7)
    return result
def func4(arg13, arg14):
    closure = [0]
    def func5(acc, rest):
        var15 = 5 ^ acc | -7 - 0
        closure[0] += var15
        if acc == 0:
            return var15
        else:
            result = func5(acc - 1, var15)
            return result
    result = func5(10, 0)
    return result
def func6(arg17, arg18):
    closure = [0]
    def func7(acc, rest):
        var19 = (-8 - -8 | -8) + closure[0]
        closure[0] += var19
        if acc == 0:
            return var19
        else:
            result = func7(acc - 1, var19)
            return result
    result = func7(10, 0)
    return result
def func8(arg21, arg22):
    closure = [0]
    def func9(acc, rest):
        var23 = (9 | (3 - (rest + closure[0]) ^ -10 & -6)) + closure[0]
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func9(acc - 1, var23)
            return result
    result = func9(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
